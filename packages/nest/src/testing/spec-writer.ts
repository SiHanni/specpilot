// 목적: spec.ts가 존재하지 않는 경우 최소 .spec.ts 스켈레톤 파일을 생성
import fs from 'node:fs';
import path from 'node:path';
import type { CollectedRoute } from '../services/scanner.service.js';
import type { SpecPilotModuleOptions } from '../tokens.js';

function ensureDir(filePath: string) {
  fs.mkdirSync(path.dirname(filePath), { recursive: true });
}

/** 생성 규칙: <outDir>/<Controller>.<method>.spec.ts (outDir 기본값: 'test') */
export function resolveSpecFilePath(
  cwd: string,
  route: CollectedRoute,
  opts?: SpecPilotModuleOptions
) {
  const baseDir = opts?.outDir || 'test';
  const file = `${route.controllerName}.${route.methodName}.spec.ts`;
  return path.join(cwd, baseDir, file);
}

/** 존재하지 않을 때만 스켈레톤 파일을 생성합니다. */
export function writeSpecSkeleton(
  cwd: string,
  route: CollectedRoute,
  opts?: SpecPilotModuleOptions
) {
  const filePath = resolveSpecFilePath(cwd, route, opts);
  if (fs.existsSync(filePath)) {
    return { filePath, created: false };
  }

  const header = `/**
 * AUTO-GENERATED BY specpilot
 * Route: ${route.http?.method ?? ''} ${route.http?.path ?? ''}
 * Controller: ${route.controllerName}
 * Handler: ${route.methodName}
 *
 * 이 파일은 최초 1회만 자동 생성됩니다.
 * 이후 단계에서 "자동 생성 영역"만 AST 병합으로 갱신하고, 수동 편집 코드는 유지합니다.
 */
`;

  // ✨ 마커가 포함된 최소 실행 가능한 템플릿
  const content = `${header}
// <sp:imports>
import { Test } from '@nestjs/testing';
// </sp:imports>

describe('${route.controllerName}.${route.methodName}', () => {
  // <sp:setup>
  // NOTE: 다음 단계에서 TestingModule 구성(컨트롤러/프로바이더 등록)이 자동으로 채워집니다.
  // 현재는 빈 모듈 부트스트랩으로 실행 가능 상태만 보장합니다.
  // </sp:setup>

  // <sp:auto-tests>
  it('should bootstrap testing module', async () => {
    const moduleRef = await Test.createTestingModule({}).compile();
    expect(moduleRef).toBeDefined();
  });

  it('should be implemented', () => {
    // TODO: 다음 단계에서 자동 생성 로직이 이 영역을 채웁니다.
    expect(true).toBe(true);
  });
  // </sp:auto-tests>
});
`;

  ensureDir(filePath);
  fs.writeFileSync(filePath, content, 'utf8');
  return { filePath, created: true };
}
